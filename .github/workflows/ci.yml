name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - nightly
        features:
          - --no-default-features --features blocking
          - --no-default-features --features async
          - --features blocking
          - --features blocking,log
          - --features defmt
          - --all-features
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --verbose ${{ matrix.features }}

      - name: Run tests
        run: cargo test --verbose ${{ matrix.features }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Run clippy (async)
        run: cargo clippy --all-targets --features async -- -D warnings

      - name: Run clippy (blocking)
        run: cargo clippy --all-targets --no-default-features --features blocking -- -D warnings

      - name: Run clippy (all features)
        run: cargo clippy --all-targets --all-features -- -D warnings

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  doc:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Build documentation
        run: cargo doc --all-features --no-deps
        env:
          RUSTDOCFLAGS: -D warnings

  # Check that the crate builds for embedded targets
  embedded-targets:
    name: Embedded Targets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - thumbv7em-none-eabihf  # ARM Cortex-M4/M7
          - thumbv6m-none-eabi     # ARM Cortex-M0/M0+
          - riscv32imac-unknown-none-elf  # RISC-V
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build for ${{ matrix.target }} (blocking)
        run: cargo build --target ${{ matrix.target }} --no-default-features --features blocking

      - name: Build for ${{ matrix.target }} (async)
        run: cargo build --target ${{ matrix.target }} --features async
